interface Engine{
    void start();
}
class DieselEngine implements Engine{
    public  void start(){
        System.out.println("This is type 1 car.\nDiesel Engine Start");
    }
}
class ElectricEngine implements Engine{
    public  void start(){
        System.out.println("This is type 2 car.\nElectric Engine Start");
    }
}
// Step 1: Create an interface for the engine
// Step 2: Create classes that implement the Engine interface
// Step 3: Create a Car class that uses the Engine interface
// This is a loosely coupled design because the Car class does not depend on a specific engine implementation.
// Instead, it depends on the Engine interface, which allows for flexibility and easier testing.


class Car{
    Engine engine;
    // Declare an Engine reference
    //Here,engine is a reference to an object that implements the Engine interface.
    // This allows the Car class to be flexible and work with any engine that implements the Engine interface.
    
    //constructor
    public Car(Engine engine){
      this.engine=engine;  
    }

    public void Startcar(){
        engine.start();
    }
}
public class LooselyCoupled{
    public static void main(String[] args) {
    Engine DieselEngine=new DieselEngine();
    Car type1=new Car(DieselEngine);// Injecting diesel engine into the car
    type1.Startcar();
    Engine ElectricEngine=new ElectricEngine();
    Car type2=new Car(ElectricEngine);
    type2.Startcar();

    }
}
