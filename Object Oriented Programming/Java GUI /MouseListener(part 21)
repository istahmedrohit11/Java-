/* 

public class Main{
    public static void main(String[] args){  
        //MouseListener = An interface that receives mouse events (mouse clicks, mouse movements, etc.) from a component.
        MyFrame frame = new MyFrame(); 
    }
}

*/

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.MouseListener;

public class MyFrame extends JFrame implements MouseListener{
    
    JLabel  label;
    ImageIcon smile;
    ImageIcon nervous;
    ImageIcon pain;
    ImageIcon dizzy;

    MyFrame(){
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(420, 420);
       
        this.setLayout(null);

        label = new JLabel();
        label.setBounds(0,0,420, 420); // Setting the bounds of the label
        //setBounds must need here because we are using setLayout(null);

        label.setBackground(Color.RED);
        label.setOpaque(true); // To make the label visible
        this.add(label);
        label.addMouseListener(this); // Adding MouseListener to the label
        //This will allow the label to respond to mouse events

        // Load an image and set it to the label
        smile = new ImageIcon("smile.png");
        nervous = new ImageIcon("nervous.png");
        pain = new ImageIcon("pain.png");
        dizzy = new ImageIcon("dizzy.png");
        // Ensure the images are loaded correctly
        
        smile.setImage(smile.getImage().getScaledInstance(420, 420, Image.SCALE_DEFAULT));
        nervous.setImage(nervous.getImage().getScaledInstance(420, 420, Image.SCALE_DEFAULT));
        pain.setImage(pain.getImage().getScaledInstance(420, 420, Image.SCALE_DEFAULT));
        dizzy.setImage(dizzy.getImage().getScaledInstance(420, 420, Image.SCALE_DEFAULT));

        // Set the image to the label
        label.setIcon(smile);
        label.addMouseListener(this);
        this.setLocationRelativeTo(null);// Center the frame on the screen
        this.setVisible(true);
    }
    // Implementing MouseListener methods
    /*
    These methods are required to be implemented when using MouseListener.
    mouseClicked: Invoked when a mouse button has been clicked (pressed and released) on a component.
    mousePressed: Invoked when a mouse button has been pressed on a component.
    mouseReleased: Invoked when a mouse button has been released on a component.
    mouseEntered: Invoked when the mouse enters a component.
    mouseExited: Invoked when the mouse exits a component.

     */

    @Override
    public void mouseClicked(java.awt.event.MouseEvent e) {
        
    }
    @Override
    public void mousePressed(java.awt.event.MouseEvent e) {
       label.setIcon(pain);
    }
    @Override
    public void mouseReleased(java.awt.event.MouseEvent e) {
        label.setIcon(dizzy);
    }
    @Override
    public void mouseEntered(java.awt.event.MouseEvent e) {
        label.setIcon(nervous);
    }
    @Override
    public void mouseExited(java.awt.event.MouseEvent e) {
        label.setIcon(smile);
    }
}


